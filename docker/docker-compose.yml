version: "3.9"

services:
  mysql-db:
    build:
      context: ./db
      dockerfile: Dockerfile
    volumes:
      - mysql-data:/var/lib/mysql
    restart: always
    networks:
      - poc-app-network
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 3s
      retries: 10
  db_updater_service:
    #    restart: "no"
    build:
      context: ./db_updater
      dockerfile: Dockerfile
    depends_on:
      rest-service:
        condition: service_started
    networks:
      - poc-app-network
  rest-service:
    depends_on:
      mysql-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    build:
      context: ./rest_service
      dockerfile: Dockerfile
    networks:
      - poc-app-network
    expose:
      - "8080"
    healthcheck:
      test: curl -f http://localhost:8080/ping || exit 1
      interval: 1m
      timeout: 3s
      retries: 3
      start_period: 15s
  redis:
    image: redis:latest
    volumes:
      - ./redis/redis.conf:/redis.conf
    networks:
      - poc-app-network
    ports:
      - 6379:6379
    command: [ "redis-server", "/redis.conf" ]
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 3s
      start_period: 10s
      retries: 10
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      rest-service:
        condition: service_started
    networks:
      - poc-app-network
    ports:
      - "4000:4000"
  test_scenario_1:
    depends_on:
      rest-service:
        condition: service_healthy
    build:
      context: race_condition_tests
      dockerfile: Dockerfile
    networks:
      - poc-app-network
    entrypoint: [ "/bin/sh", "/etc/test_scenario_1.sh" ]
  test_scenario_2:
    depends_on:
      rest-service:
        condition: service_healthy
    build:
      context: race_condition_tests
      dockerfile: Dockerfile
    networks:
      - poc-app-network
    entrypoint: [ "/bin/sh", "/etc/test_scenario_2.sh" ]
  test_scenario_3:
    depends_on:
      rest-service:
        condition: service_healthy
    build:
      context: race_condition_tests
      dockerfile: Dockerfile
    networks:
      - poc-app-network
    entrypoint: [ "/bin/sh", "/etc/test_scenario_3.sh" ]
volumes:
  mysql-data:
networks:
  poc-app-network:
    driver: bridge